name: Build, Push, and Deploy to ACI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to Azure using the Service Principal
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Login to ACR using Service Principal
      - name: Login to Azure Container Registry
        run: |
          SP_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS }}
          CLIENT_ID=$(echo $SP_CREDENTIALS | jq -r '.clientId')
          CLIENT_SECRET=$(echo $SP_CREDENTIALS | jq -r '.clientSecret')
          TENANT_ID=$(echo $SP_CREDENTIALS | jq -r '.tenantId')
          ACR_LOGIN_SERVER=$(echo $SP_CREDENTIALS | jq -r '.acrLoginServer')

          az acr login --name $ACR_LOGIN_SERVER --username $CLIENT_ID --password $CLIENT_SECRET

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }} -f MyDotNetApp/Dockerfile MyDotNetApp

      # Step 5: Push the Docker image to ACR
      - name: Push Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }}

  deploy-aci:
    name: Deploy to ACI
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Step 1: Login to Azure using the Service Principal
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 2: Deploy the image to ACI
      - name: Deploy ACI with updated image
        run: |
          SP_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS }}
          CLIENT_ID=$(echo $SP_CREDENTIALS | jq -r '.clientId')
          CLIENT_SECRET=$(echo $SP_CREDENTIALS | jq -r '.clientSecret')
          TENANT_ID=$(echo $SP_CREDENTIALS | jq -r '.tenantId')
          ACR_LOGIN_SERVER=$(echo $SP_CREDENTIALS | jq -r '.acrLoginServer')

          az container create \
            --resource-group github-action-1 \
            --name acrassignment1 \
            --image $ACR_LOGIN_SERVER/mydotnetapp:latest \
            --dns-name-label acrassignment1 \
            --ports 5000 \
            --cpu 1 \
            --memory 1 \
            --registry-login-server $ACR_LOGIN_SERVER \
            --registry-username $CLIENT_ID \
            --registry-password $CLIENT_SECRET

      # Step 3: Output Public URL of the ACI
      - name: Output Public URL
        run: |
          az container show \
            --resource-group github-action-1 \
            --name acrassignment1 \
            --query "ipAddress.fqdn" -o tsv
