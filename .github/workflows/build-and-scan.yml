name: Build, Push, and Verify Azure Container Instance

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to Azure using the Service Principal for ACR
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Login to ACR
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }} -f MyDotNetApp/Dockerfile MyDotNetApp

      # Step 5: Push the Docker image to ACR
      - name: Push Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/mydotnetapp:${{ github.sha }}

  verify-aci:
    name: Verify Azure Container Instance
    runs-on: ubuntu-latest
    needs: build-and-push  # Dependent on the `build-and-push` job

    steps:
      # Step 1: Login to Azure using a Service Principal (ACI-specific)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_VERIFICATION_SP }}

      # Step 2: Verify Azure Login
      - name: Verify Azure Login
        run: |
          az account show

      # Step 3: Verify ACI (List running container instances)
      - name: List Azure Container Instances
        run: |
          az container list --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} --output table

      # Step 4: Show Logs from ACI (Optional)
      - name: Fetch ACI Logs
        run: |
          az container logs --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} --name ${{ secrets.ACI_NAME }}
